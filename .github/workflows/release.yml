name: Publish Release and Update CHANGELOG

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (e.g., 1.2.3)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without making changes'
        required: true
        default: true
        type: boolean

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:      
      - name: Validate semantic version
        run: |
          if ! [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid semantic version: ${{ github.event.inputs.version }}"
            echo "Version must be in format: X.Y.Z"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check non-decreasing version
        run: |
          version="${{ github.event.inputs.version }}"
          cur_version=$(sed -n 's/.*"version": "\([^"]*\)".*/\1/p' package.json)
          semver_gt() {
            local ver1=$1
            local ver2=$2
            IFS=. read -r major1 minor1 patch1 <<< "$ver1"
            IFS=. read -r major2 minor2 patch2 <<< "$ver2"
            if [ "$major1" -gt "$major2" ]; then return 0; fi
            if [ "$major1" -lt "$major2" ]; then return 1; fi
            if [ "$minor1" -gt "$minor2" ]; then return 0; fi
            if [ "$minor1" -lt "$minor2" ]; then return 1; fi
            if [ "$patch1" -gt "$patch2" ]; then return 0; fi
            return 1
          }
          if ! semver_gt "${version}" "${cur_version}"; then
            echo "Version ${version} is not strictly greater than the current version ${cur_version}"
            exit 1
          fi
      
  release:
    needs: validate-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find draft release
        id: get_draft
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.payload.inputs.version;
            const dryRun = context.payload.inputs.dry_run;
            
            console.log(`Processing version: ${version}, dry-run: ${dryRun}`);

            const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });

            const draft = releases.data.find(r => r.draft);
            if (!draft) {
                core.setFailed("No draft release found.");
                return;
            }

            const expectedTag = `v${version}`;
            if (draft.tag_name !== expectedTag) {
                core.setFailed(`Draft release tag '${draft.tag_name}' does not match expected tag '${expectedTag}'.`);
                return;
            }

            // Check if the draft release already has a body
            if (!draft.body) {
                core.setFailed("Draft release has no body.");
                return;
            }
            // Set outputs for later steps
            core.setOutput("release_body", draft.body);
            core.setOutput("release_id", draft.id);
            core.setOutput("tag_name", draft.tag_name);

      - name: Insert draft content to CHANGELOG.md
        run: |
          echo "Inserting draft release notes into CHANGELOG.md at <!-- next-header -->..."
          temp_entry=$(mktemp)
          # Write the draft content into temp_entry
          echo "${{ steps.get_draft.outputs.release_body }}" > "$temp_entry"
          echo "" >> "$temp_entry"
          temp_file=$(mktemp)
          # Insert the draft content right after the <!-- next-header --> marker
          awk '/<!-- next-header -->/ { print; system("cat '"$temp_entry"'"); next }1' CHANGELOG.md > "$temp_file"
          mv "$temp_file" CHANGELOG.md

      - name: Bump version in package.json
        run: |
          version="${{ github.event.inputs.version }}"
          echo "Bumping version in package.json to ${version}"
          jq ".version = \"${version}\"" package.json > package.json.tmp
          mv package.json.tmp package.json
      
      - name: Commit changes
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "Dry run: showing diff and exiting"
              git --no-pager diff
              exit 0
          fi
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md package.json
          # Check no other unstaged changes
          git diff --exit-code

          # Commit the changes, but prevent downstream workflows from running (otherwise release drafter will overwrite release notes)
          git commit -m "[skip ci] Update CHANGELOG with release notes for v${{ github.event.inputs.version }}"
          git push origin main

      - name: Publish the draft release
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = parseInt("${{ steps.get_draft.outputs.release_id }}", 10);
            const dryRun = context.payload.inputs.dry_run;
            const version = context.payload.inputs.version;

            if (dryRun) {
                core.info(`Dry run for version ${version}. Would publish release with ID: ${releaseId}`);
                core.info(`Tag name would be: ${{ steps.get_draft.outputs.tag_name }}`);
                return;
            }
            
            const result = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              draft: false
            });
            core.info("Release published: " + result.data.html_url);
